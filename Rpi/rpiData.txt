# bash file
nano ~/.bashrc 

### Custom scripts

## Background scripts 
# Cooling fan control python script based on cpu temperature
lxterminal -e "python /home/ssbrpi/Project/Rpi/Background/tempMeasurement.py"

# Copy to clipboard
alias wl-copy="copy"

# Clear screen
alias cls="clear"


# Start Docker container personal assistant, web app 
alias dockerPersonalAssistantWebApp='sudo docker rm ollamaLocal -f && \
sudo docker run -d --rm -v ollama:/root/.ollama -v /home/ssbrpi/Project:/root/Project/ -p 11434:11434 -p 5001:5001 --name ollamaLocal personal_assistant && \
sudo docker exec -it ollamaLocal python /App/UI/WebApp/app.py'

# Start Docker container personal assistant, cli 
alias dockerPersonalAssistantCli='sudo docker rm ollamaLocal -f && \
sudo docker run -d --rm -v ollama:/root/.ollama -v /home/ssbrpi/Project:/root/Project/ -p 11434:11434 --name ollamaLocal personal_assistant && \
sudo docker exec -it ollamaLocal python /App/UI/cli.py'


## File links
# txt rpiData file
alias txtRpiData="nano /home/ssbrpi/Project/Rpi/rpiData.txt"

# txt config bash file
alias txtConfigBash="nano /home/ssbrpi/.bashrc"

## Directory links
alias cdPersonalAssistant="cd /home/ssbrpi/Project/Rpi/PersonalAssistant"

# Restart GUI
alias restartLightdm="sudo systemctl restart lightdm"


##
#copy recent cmd output to clipboard
sudo apt install wl-clipboard
echo hi | wl-copy 

#copy recent cmd to clipboard
echo !! | wl-copy


docker exec -it ollamaLocal /bin/sh

cd ~/ProjectRpi/Rpi/RpiCameraV01

cd ~/ProjectRpi/Rpi/ChatBot


// python virtual envirmment
source envHandDetection/bin/activate

python3 -m venv envHandDetection

deactivate

// Get cpu temp
vcgencmd measure_temp 

// Get
nmcli

// Set usb tethering address to a static address
nmcli connection modify "Wired connection 2" ipv4.addresses 192.168.210.224/24
 ipv4.gateway 192.168.210.1 ipv4.dns "8.8.8.8,8.8.4.4" ipv4.method manual

// Reset connection
nmcli connection up "Wired connection 2"

// Get Ip address
ip addr

// Config Rpi
sudo raspi-config 

// Rpi cam preview for 10 sec
rpicam-hello --timeout 10000

rpicam-hello --lores-width 128 --lores-height 96 --timeout 30000

rpicam-hello --lores-width 128 --lores-height 96 --post-process-file motion_detect.json 

rpicam-hello --lores-width 128 --lores-height 96 --post-process-file motion_detect.json --timeout 5000

rpicam-jpeg --output img.jpg --lores-width 128 --lores-height 96 --post-process-file motion_detect.json --timeout 10000

Sensor: /base/axi/pcie@120000/rp1/i2c@88000/ov5647@36 - Selected sensor format: 1296x972-SGBRG10_1X10 - Selected CFE format: 1296x972-PC1g



rpicam-hello --lores-width 128 --lores-height 96 --post-process-file motion_detect.json --timeout 5000

rpicam-hello --lores-width 128 --lores-height 96 --post-process-file motion_detect.json --timeout 5000 > motion_log.txt

rpicam-hello --lores-width 128 --lores-height 96 --post-process-file motion_detect.json --timeout 5000 >> motion_log.txt 2>&1


#!/bin/bash

LOG_FILE="motion_log.txt"

# Monitor the log file for motion detection keyword
tail -F "motion_log.txt" | while read -r line; do
    # Adjust this condition to match your motion detection log
    if echo "" | grep -q "motion detected"; then
        echo "Motion detected! Running test.sh..."
        ./test.sh
    fi
done
